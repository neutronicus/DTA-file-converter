This project implements the following: a .DTA file to JSON converter,
and a C++ matlab extension to import .DTA files into matlab as matlab
arrays.  The .DTA file to JSON converter is a command line application
that can be used either on its own or via the shell scripts dta2j,
dta2j3, dta2j_nowave, and dta2j_waveonly.  When used on its own, the
syntax for invocation is as follows:

dta2json <src>
dta2json <src> <dest>
dta2json <src> <hit-dest> <time-dest> <wave-dest>

The first, given a file example.DTA, will produce a file example.json
The second will name the JSON file whatever is in the <dest> argument
The third will produce three files, one containing only hit-based data,
one containing only time-based data, and the last containing only
waveform data.

This is somewhat cumbersome, because it only works on a single source
file at a time.  To batch convert several .DTA files, use the included
shell scripts.

dta2j <files>
dta2j3 <files>
dta2j_nowave <files>
dta2j_waveonly <files>

For each of the files in its argument list, dta2j will invoke dta2json
with one argument, producing a collection of plain text files with the
same names as the input files, but the extension changed to .json.

dta2j3 produces three files for each single input file.  If the input
file is named example.DTA, the outputs will be example-hit.json,
example-time.json, and example-wave.json.  These three files respect-
-ively contain hit-based, time-based, and wave-form data in JSON
format.

dta2j_nowave and dta2j_waveonly do the same thing, but respectively omit
the waveform data and produce only the waveform data.

The shell scripts all invoke the converter as a background process, so
that all of these batch conversions run in parallel.

--------------------------------------------------------------------------

The matlab extension requires that the file import_dta.mex<SUF>, where
<SUF> is a platform-dependent suffix, be on the matlab path.  Furthermore,
in order to build it, all of the MATLAB and MEX-related macros in the
makefile must be changed to point at the appropriate locations on your
system.

Once it is built and on the path, it can be invoked at the MATLAB prompt
or within a script as follows:

[a, b, x] = import_dta ('example.DTA');

a will hold a structure array corresponding the hit-based AE characteristic
data and the waveform data.  b will hold a structure array corresponding to
the time-based AE characteristic data and the parametric data.  x will hold
an n_channels x n_samples matrix consisting of the abscissa for the wave-
-form data from each channel.

There is also an included m-file that implements a function for importing
.dta files in parallel.  It is invoked as follows:

[a, b] = import_multiple_dta ({'file1.DTA', 'file2.DTA', ...});

a and b will contain distributed structure arrays with the contents of all
of the input files after this command is invoked.  If there is enough memory
on a single machine to hold this array in its entirety, it can be forced
onto one machine using the parallel computing toolbox function 'gather',
e.g.

gather(a);
